// Code generated by mockery v2.9.4. DO NOT EDIT.

package userrepo

import (
	context "context"
	userent "ifoodish-store/internal/user/domain/entity"

	mock "github.com/stretchr/testify/mock"

	uservo "ifoodish-store/internal/user/domain/valueobject"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: ctx, user, password
func (_m *MockUserRepository) AddUser(ctx context.Context, user userent.User, password uservo.PasswordEncoded) (uservo.UserID, error) {
	ret := _m.Called(ctx, user, password)

	var r0 uservo.UserID
	if rf, ok := ret.Get(0).(func(context.Context, userent.User, uservo.PasswordEncoded) uservo.UserID); ok {
		r0 = rf(ctx, user, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uservo.UserID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, userent.User, uservo.PasswordEncoded) error); ok {
		r1 = rf(ctx, user, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddUserAddress provides a mock function with given fields: ctx, userID, address
func (_m *MockUserRepository) AddUserAddress(ctx context.Context, userID uservo.UserID, address userent.Address) (uservo.AddressID, error) {
	ret := _m.Called(ctx, userID, address)

	var r0 uservo.AddressID
	if rf, ok := ret.Get(0).(func(context.Context, uservo.UserID, userent.Address) uservo.AddressID); ok {
		r0 = rf(ctx, userID, address)
	} else {
		r0 = ret.Get(0).(uservo.AddressID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uservo.UserID, userent.Address) error); ok {
		r1 = rf(ctx, userID, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAddress provides a mock function with given fields: ctx, userID, addressID
func (_m *MockUserRepository) GetUserAddress(ctx context.Context, userID uservo.UserID, addressID uservo.AddressID) (userent.RegisteredAddress, error) {
	ret := _m.Called(ctx, userID, addressID)

	var r0 userent.RegisteredAddress
	if rf, ok := ret.Get(0).(func(context.Context, uservo.UserID, uservo.AddressID) userent.RegisteredAddress); ok {
		r0 = rf(ctx, userID, addressID)
	} else {
		r0 = ret.Get(0).(userent.RegisteredAddress)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uservo.UserID, uservo.AddressID) error); ok {
		r1 = rf(ctx, userID, addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAddresses provides a mock function with given fields: ctx, userID
func (_m *MockUserRepository) GetUserAddresses(ctx context.Context, userID uservo.UserID) ([]userent.RegisteredAddress, error) {
	ret := _m.Called(ctx, userID)

	var r0 []userent.RegisteredAddress
	if rf, ok := ret.Get(0).(func(context.Context, uservo.UserID) []userent.RegisteredAddress); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userent.RegisteredAddress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uservo.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmailAndPassword provides a mock function with given fields: ctx, email, password
func (_m *MockUserRepository) GetUserByEmailAndPassword(ctx context.Context, email uservo.Email, password uservo.PasswordEncoded) (userent.RegisteredUser, error) {
	ret := _m.Called(ctx, email, password)

	var r0 userent.RegisteredUser
	if rf, ok := ret.Get(0).(func(context.Context, uservo.Email, uservo.PasswordEncoded) userent.RegisteredUser); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(userent.RegisteredUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uservo.Email, uservo.PasswordEncoded) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInfo provides a mock function with given fields: ctx, userID
func (_m *MockUserRepository) GetUserInfo(ctx context.Context, userID uservo.UserID) (userent.RegisteredUser, error) {
	ret := _m.Called(ctx, userID)

	var r0 userent.RegisteredUser
	if rf, ok := ret.Get(0).(func(context.Context, uservo.UserID) userent.RegisteredUser); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(userent.RegisteredUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uservo.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUser provides a mock function with given fields: ctx, userID
func (_m *MockUserRepository) RemoveUser(ctx context.Context, userID uservo.UserID) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uservo.UserID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUserAddress provides a mock function with given fields: ctx, userID, addressID
func (_m *MockUserRepository) RemoveUserAddress(ctx context.Context, userID uservo.UserID, addressID uservo.AddressID) error {
	ret := _m.Called(ctx, userID, addressID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uservo.UserID, uservo.AddressID) error); ok {
		r0 = rf(ctx, userID, addressID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: ctx, user
func (_m *MockUserRepository) SaveUser(ctx context.Context, user userent.RegisteredUser) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, userent.RegisteredUser) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUserAddress provides a mock function with given fields: ctx, userID, address
func (_m *MockUserRepository) SaveUserAddress(ctx context.Context, userID uservo.UserID, address userent.RegisteredAddress) error {
	ret := _m.Called(ctx, userID, address)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uservo.UserID, userent.RegisteredAddress) error); ok {
		r0 = rf(ctx, userID, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, userID, newPassword
func (_m *MockUserRepository) UpdatePassword(ctx context.Context, userID uservo.UserID, newPassword uservo.PasswordEncoded) error {
	ret := _m.Called(ctx, userID, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uservo.UserID, uservo.PasswordEncoded) error); ok {
		r0 = rf(ctx, userID, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
